# High-End RTX GPU Dockerfile
# Optimized for high-end RTX graphics cards (3090, 4090, 5090)
FROM nvidia/cuda:12.3.2-cudnn9-runtime-ubuntu22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Python and build essentials
    python3.10 \
    python3.10-dev \
    python3-pip \
    build-essential \
    cmake \
    pkg-config \
    # Audio dependencies
    portaudio19-dev \
    libasound2-dev \
    alsa-utils \
    pulseaudio-utils \
    # Media processing
    ffmpeg \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev \
    libswresample-dev \
    # Additional utilities
    wget \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set up Python 3.10 as default python3
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1

# Upgrade pip
RUN python3 -m pip install --upgrade pip setuptools wheel

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create directories for models and logs
RUN mkdir -p /app/models /app/logs

# Environment variables for high-end RTX optimization
ENV MODEL_PATH=/app/models
ENV WHISPER_BACKEND=faster-whisper
ENV CUDA_VISIBLE_DEVICES=0

# CUDA optimizations for high-end RTX cards
ENV CUDA_DEVICE_ORDER=PCI_BUS_ID
ENV CUDA_LAUNCH_BLOCKING=0
ENV CUDA_CACHE_DISABLE=0
ENV CUDA_MEMORY_FRACTION=0.95

# cuDNN and CUDA library paths
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH}"
ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="/usr/local/cuda/bin:${PATH}"

# PyTorch optimizations for high-end RTX cards
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
ENV TORCH_CUDNN_V8_API_ENABLED=1

# Audio system configuration
ENV PULSE_RUNTIME_PATH=/var/run/pulse
ENV ALSA_CONFIG_PATH=/usr/share/alsa/alsa.conf

# Application configuration
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Create non-root user for security
RUN useradd -m -u 1000 sttuser && chown -R sttuser:sttuser /app
USER sttuser

# Health check (updated for WebSocket server)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose ports (WebSocket server on 8000, monitoring on 9091)
EXPOSE 8000 9091

# Default command - WebSocket server mode
CMD ["python3", "main.py", "websocket", "--host", "0.0.0.0", "--port", "8000"]